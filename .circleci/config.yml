version: 2.1

# Template steps to be reused in the jobs
setup_steps:
  - &install_deps
    run: 
      name: Install dependencies
      command: |
        sudo apt update
        sudo apt install clang
  - &setup_rust
    run:
      name: Setup rust nightly and targets
      command: |
        rustup default nightly
        rustup target install wasm32-unknown-unknown
  - checkout
  - &version_info
    run: 
      name: Version information
      command: rustc --version; cargo --version; rustup --version
  - &cargo_fetch_retry
    run:
      name: Fetch dependencies with retry
      command: |
        for i in {1..10}; do cargo fetch && break || sleep 15; done
  - &restore_cache
    restore_cache:
      keys:
        - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
  - &save_cache
    save_cache:
      paths:
        - /usr/local/cargo/registry
        - target/debug/.fingerprint
        - target/debug/build
        - target/debug/deps
      key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
  
jobs:
  build-and-test:
    docker:
      - image: circleci/rust
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - *install_deps
      - *setup_rust
      - *version_info
      - checkout
      - *restore_cache 
      - *cargo_fetch_retry
      - run:
          name: Build all targets
          command: cargo build
      - *save_cache
      - run:
          name: Run all tests
          command: cargo test
      - persist_to_workspace:
          root: .
          paths:
            - target/debug/node

  security:
    docker:
      - image: circleci/rust
    steps:
      - *install_deps
      - *setup_rust
      - *version_info
      - checkout
      - run:
          name: Cache permission
          command: |
            sudo chown -R $(whoami):$(id -ng) /usr/local/cargo
      - restore_cache:
          keys:
            - v1-cargo-audit-{{ arch }}
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - save_cache:
          paths:
            - /usr/local/cargo
          key: v1-cargo-audit-{{ arch }}
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit

  format:
    docker:
      - image: circleci/rust
    steps:
      - *install_deps
      - *setup_rust
      - *version_info
      - checkout
      - *restore_cache 
      - *cargo_fetch_retry
      - run:
          name: Install formatter
          command: rustup component add rustfmt
      - run:
          name: Formatting
          command: cargo fmt --all -- --check
      - *save_cache

  lint:
    docker:
      - image: circleci/rust
    resource_class: large
    steps:
      - *install_deps
      - *setup_rust
      - *version_info
      - checkout
      - *restore_cache 
      - *cargo_fetch_retry
      - run:
          name: Install formatter
          command: rustup component add rustfmt
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Linting
          # allowed unused-init as its generated by palette::event
          command: cargo clippy -- -D warnings -A clippy::unused-unit -A clippy::from-over-into
      - *save_cache

  deploy_node:
    docker:
      - image: circleci/rust
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Docker login
          command: |
            docker login --username $DOCKER_LOGIN --password $DOCKER_PASSWORD

      # NOTE: make sure no checkout with
      #       a .dockerignore file ignoring target
      - run:
          name: Build basic Dockerfile
          command: |
            # We use the artifact of the previous
            # build step which should be in 
            #    `build/release/node`
            # in the backend dir.

            # this escape \<< is circeci specific
            cat \<<EOS >Dockerfile
            FROM ubuntu:focal

            WORKDIR /app

            COPY target/debug/node /app
            ENTRYPOINT ["/app/node"]
            EOS

            # comment needs to be here
            # otherwise the EOS is defunkt

      - run:
          name: Setup custom environment variables
          command: |
            # TODO: change boymaas/... to a fractal/.. docker account
            export BUILD_ID="${CIRCLE_SHA1:0:7}_$(date +'%Y%m%d_%H%M')"
            export IMAGE="boymaas/nodefcl:$BUILD_ID"

            echo "export IMAGE=$IMAGE" >> $BASH_ENV
      - run:
          name: Build docker container
          command: |
            docker build -t $IMAGE .
          no_output_timeout: 30m
      - run:
          name: Push docker image
          command: |
            docker push $IMAGE

workflows:
  version: 2
  build-test:
    jobs:
      # TODO(shelbyd): enable if deemed necessary
      # - security:
      #     filters:
      #       tags:
      #         only: /.*/
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - format:
          filters:
            tags:
              only: /.*/
      - lint:
          filters:
            tags:
              only: /.*/
      - deploy_node:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - master
                - boymaas-cicd-docker-build
